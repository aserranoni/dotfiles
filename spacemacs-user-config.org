* Global Stuff

#+begin_src emacs-lisp
    ;; supress package cl deprecated warning at startup

  (setq byte-complile-warnings '(not cl-functions))

     ;; Enable doom modeline, ivy rich  and undo-tree globally

     (doom-modeline-mode 1)
     (global-undo-tree-mode)
     (ivy-rich-mode)-the-icons-ivy-rich-mode)
     ;; Support multiple eshell instances

     (defun eshell-new()
       "Open a new instance of eshell."
       (interactive)
       (eshell 'N)
       )

#+end_src


** Some Keybindings
#+begin_src emacs-lisp

      ;; Extra custom keybindings
        (global-set-key (kbd "C-x s") (quote eshell)) ; open eshell
        (global-set-key (kbd "C-x C-2") (quote make-frame)) ;; open new frame
        ;;(global-set-key (kbd "C-s") (quote helm-occur)) ;; Helm fancy search
        (global-set-key (kbd "C-x w") (quote wg-open-workgroup)) ;; go-to workgroups
        (global-set-key (kbd "C-c s") (quote engine/search-duck-duck-go)) ;; search the web
        (global-set-key (kbd "C-c r") (quote rainbow-delimiters-mode)) ;; activate rainbow delimiters
        (global-set-key (kbd "C-z") (quote undo-tree-visualize)) ;;use undo tree with reasonable shortcut - NOT WORKING
 #+end_src

** Navigation

 #+begin_src emacs-lisp

                 ;; Ace Window

                 (global-set-key [remap other-window] 'ace-window)
                 (custom-set-faces
                  '(aw-leading-char-face
                    ((t (:inherit ace-jump-face-foreground :height 2.0)))))
                 (global-set-key (kbd "C-x o") (quote ace-window))

                 ;; Avy

               (avy-setup-default)
               (setq avy-all-windows t)
               (global-set-key (kbd "M-n w") (quote avy-goto-word-0)) ;; Navigate to word
               (global-set-key (kbd "M-n l") (quote avy-goto-line)) ;; Navigate ro line
               (global-set-key (kbd "M-n c r") (quote avy-kill-ring-save-region))
               (global-set-key (kbd "M-n k r") (quote avy-kill-region))

 #+end_src

** Surfing the web
#+begin_src emacs-lisp
                     ;; Support for Windows Browser

                     (defun browse-url-ariel (url &optional _new-window)
                       "Function to open url on windows google chrome browser
                             - compatible with browse-url
                             - useful for wsl users"
                       (interactive "s")
                       (shell-command
                        (concat
                         (concat
                          "\"/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe\"" " ") url ))
                       )

                     (setq browse-url-browser-function 'browse-url-ariel)
                     (setq browse-url-chrome-program
                       "/mnt/c/Program\\ Files\\ \\(x86\\)/Google/Chrome/Application/chrome.exe")

#+end_src

* Org-Mode Configuration
** Defaults
   #+begin_src emacs-lisp

     ;; Align Tables and fold at startup

                       (setq org-startup-align-all-tables t)
                       (setq org-startup-folded t)
                   ;; org-capture templates

                                (setq org-capture-templates
                                  '(("a" "Appointment" entry
                                     (file+olp "~/coisas/matematicasdavida/minhascoisas/org/personal.org" "External Communication" "Appointments")
                                     "")
                                    ("r" "Talk to" entry
                                     (file+olp "~/coisas/matematicasdavida/minhascoisas/org/personal.org" "External Communication" "Talk to")
                                     "")
                                    ("b" "Blog idea" entry
                                     (file+olp "~/coisas/matematicasdavida/minhascoisas/org/application.org" "Build/Improve Website" "Add Content")
                                     "
                                " :prepend t)
                                    ("t" "Task" entry
                                     (file+headline "~/coisas/matematicasdavida/minhascoisas/org/notes.org" "Captured Tasks")
                                     "
                                ")
                                    ("n" "Note" entry
                                     (file+headline "~/coisas/matematicasdavida/minhascoisas/org/notes.org" "Notespace")
                                     "
                                ")
                                    ("p" "Project" entry
                                     (file+olp "~/coisas/matematicasdavida/minhascoisas/org/notes.org" "Captured Projects")
                                     "")))

              ;; active built-in modules
                               (setq org-modules
                           '(org-bbdb
                             org-bibtex
                             org-docview
                             org-eww
                             org-gnus
                             org-habit
                             org-info
                             org-irc
                             org-mhe
                             org-rmail
                             org-w3m
                             org-notify)
                           )

           ;; org-habit configuration

                         (setq org-habit-preceding-days 7)
                         (setq org-habit-show-all-today t)
                         (setq org-habit-show-done-always-green t)


          ;; todo keywords

           (setq org-todo-keywords
           '((sequence "TODO(n)"
                       "Idea(i)"
                       "InProgress(p)"
                       "MissingRequirement(r@)"
                       "HugeObstacle(h@)"
                       "|"
                       "DONE(f@)"
                       "Cancelled(c@)")))

         

   #+end_src

** Visual
   #+begin_src emacs-lisp
         (setq org-todo-keyword-faces (quote
                  (("Idea" . "White")
                   ("MissingRequirement" . "yellow")
                   ("DONE" . "green")
                   ("Cancelled" . "forest green")
                   ("HugeObstacle" . "red")
                   ("TODO" . "magenta"))))

     ;; TODO: Set org-ellipsis to triangle
     ;; TODO: Ser org-table font to monospaced
   #+end_src
   
** Add-ons
*** Org-Noter
    #+begin_src emacs-lisp
     
                   (global-set-key (kbd "C-c C-n") (quote org-noter))
                     (setq org-noter-default-notes-file-names (quote ("pdfnotes.org")))
                     (setq org-noter-doc-property-in-notes t)
                     (setq org-noter-notes-search-path (quote ("~/coisas/matematicasdavida/minhascoisas/org")))


    #+end_src
*** Org-Brain
 #+begin_src emacs-lisp

             (global-set-key (kbd "C-c C-b") (quote org-brain-visualize))
              (setq org-brain-path "~/coisas/matematicasdavida/minhascoisas/org/")


 #+end_src
*** Org-Bullets
    #+begin_src emacs-lisp

                      (use-package org-bullets                                                                                               
                         :ensure t)                                                                                                          
      (add-hook 'org-mode-hook 'org-bullets-mode)
 

    #+end_src
*** Org-Babel
#+begin_src emacs-lisp
                     (setq org-babel-load-languages (quote
                                                     ((python . t)
                                                      (emacs-lisp . t)
                                                      (R . t))))
#+end_src
*** Org- Ref
#+begin_src emacs-lisp
                        (setq org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex)
                   (setq org-ref-default-bibliography (quote
                                                       ("~/coisas/matematicasdavida/Livros/library.bib")))
                   (setq org-ref-get-pdf-filename-function (quote org-ref-get-mendeley-filename))
#+end_src
* Programming Languages
** LaTeX
 #+begin_src emacs-lisp
;;; Adding Some Functionality to tex.el

(defun ariel/tex-open-inline-mathmode ()
   (interactive)
    (insert (concat "\\" "\(")))

(defun ariel/tex-close-inline-mathmode()
  (interactive)
  (insert (concat "\\" "\)")))

(defun ariel/tex-open-display-mathmode ()
  (interactive)
  (insert (concat "\\" "\[")))

(defun ariel/tex-close-display-mathmode()
  (interactive)
  (insert (concat "\\" "\]")))



(defun ariel/tex-inline-mathmode (arg)
  "Make a pair of braces around next ARG sexps and leave point inside.
No argument is equivalent to zero: just insert braces and leave point
between.

If there is an active region, ARG will be ignored, braces will be
inserted around the region, and point will be left after the
closing brace."
  (interactive "P")
  (if (TeX-active-mark)
      (progn
	      (if (< (point) (mark))
	          (exchange-point-and-mark))
	      (ariel/tex-close-inline-mathmode)
	      (save-excursion
	        (goto-char (mark))
	        (ariel/tex-open-inline-mathmode)))
    (ariel/tex-open-inline-mathmode)
    (save-excursion
      (if arg (forward-sexp (prefix-numeric-value arg)))
      (ariel/tex-close-inline-mathmode))))

(defun ariel/tex-display-mathmode (arg)
  "Make a pair of braces around next ARG sexps and leave point inside.
No argument is equivalent to zero: just insert braces and leave point
between.

If there is an active region, ARG will be ignored, braces will be
inserted around the region, and point will be left after the
closing brace."
  (interactive "P")
  (if (TeX-active-mark)
      (progn
	      (if (< (point) (mark))
	          (exchange-point-and-mark))
	      (ariel/tex-close-display-mathmode)
	      (save-excursion
	        (goto-char (mark))
	        (ariel/tex-open-display-mathmode)))
    (ariel/tex-open-display-mathmode)
    (save-excursion
      (if arg (forward-sexp (prefix-numeric-value arg)))
      (ariel/tex-close-display-mathmode))))


(defun ariel/inline-dollar-mathmode (arg)
    "Make a pair of braces around next ARG sexps and leave point inside.
No argument is equivalent to zero: just insert braces and leave point
between.

If there is an active region, ARG will be ignored, braces will be
inserted around the region, and point will be left after the
closing brace."
    (interactive "P")
    (if (TeX-active-mark)
        (progn
	        (if (< (point) (mark))
	            (exchange-point-and-mark))
	        (TeX-insert-dollar)
	        (save-excursion
	          (goto-char (mark))
	          (TeX-insert-dollar)))
      (TeX-insert-dollar)
      (save-excursion
        (if arg (forward-sexp (prefix-numeric-value arg)))
        (TeX-insert-dollar))))


(defun ariel/display-dollar-mathmode (arg)
  "Make a pair of braces around next ARG sexps and leave point inside.
No argument is equivalent to zero: just insert braces and leave point
between.

If there is an active region, ARG will be ignored, braces will be
inserted around the region, and point will be left after the
closing brace."
  (interactive "P")
  (if (TeX-active-mark)
      (progn
	      (if (< (point) (mark))
	          (exchange-point-and-mark))
	      (TeX-insert-dollar)
        (TeX-insert-dollar)
	      (save-excursion
	        (goto-char (mark))
	        (TeX-insert-dollar)
          (TeX-insert-dollar)))
    (TeX-insert-dollar)
    (TeX-insert-dollar)
    (save-excursion
      (if arg (forward-sexp (prefix-numeric-value arg)))
      (TeX-insert-dollar)
      (TeX-insert-dollar))))
 #+end_src

 #+RESULTS:
 : ariel/display-dollar-mathmode

* Left to organize
** Wolfram Mode  
#+begin_src emacs-lisp


      ;; Set wolfram mode for .m files - include other wolfram extensions
        (add-to-list 'auto-mode-alist '("\.m$" . wolfram-mode))

        ;; Set PDFView mode from pdf-tools as default to pdf files
        (add-hook 'emacs-startup-hook 'pdf-tools-install)
        (add-to-list 'auto-mode-alist '("\.pdf$" . pdf-view-mode))
      ;; Python mode hook - enable elpy
        (add-hook 'python-mode-hook #'elpy-mode)


                                            ;;
                                                                                                                         ;;
 (setq-default ess-dialect "R")                                                                                          ;;
 (setq-default inferior-R-args "--no-restore-history --no-save ")                                                        ;;
                                                                                                                              ;;

  ; ;;goto wolfram docs                                                                                                     ;;
                                                                                                                                    ;;
   (defun goto-wolfram-documentation ()                                                                                    ;;
        (interactive)                                                                                                         ;;
        (browse-url "https://reference.wolfram.com/language/"))                                                               ;;
                                                                                                                               ;;
       (defun search-wolfram-documentation ()                                                                                  ;;
         (interactive)                                                                                                         ;;
         (browse-url (concat "https://reference.wolfram.com/search/"                                                           ;;
                             (concat "?q=" (read-string "What do you want to search for? "))))                                 ;;
              )                                                                                                                     ;;
      ;; ;;                                                                                                                         ;;
      ;; ;;                                                                                                                         ;;

      ;; ;;                                                                                                                         ;;
      ;; ;; ;;; Some Variables                                                                                                      ;;
                                                                                                                                    ;;
       (setq TeX-view-program-selection                                                                                        ;;
             (quote (                                                                                                          ;;
                      ((output-dvi has-no-display-manager) "PDF Tools")                                                         ;;
                     ((output-dvi style-pstricks) "PDF Tools")                                                                 ;;
                     (output-dvi "PDF Tools")                                                                                  ;;
                     (output-pdf "PDF Tools")                                                                                  ;;
                     (output-html "PDF Tools"))))                                                                              ;;
       (setq bibtex-completion-notes-path "~/coisas/matematicasdavida/minhascoisas/org/pdfnotes.org")                          ;;
       (setq bibtex-completion-pdf-field "nil")                                                                                ;;
                                                                                                                               ;;

      ;; ;; ;; Python                                                                                                               ;;
                                                                                                                               ;;
            (setq elpy-rpc-python-command "python3")                                                                                ;;
            (setq python-shell-interpreter "python3")




      (setq reftex-default-bibliography (quote
                                                  ("~/coisas/matematicasdavida/Livros/library.bib")))

      (setq rmh-elfeed-org-files(quote
                                 ("~/coisas/matematicasdavida/minhascoisas/org/rssfeeds.org")))



      ;; wolfram-mode

      (setq wolfram-path "/mnt/c/Ariel/")
      (setq wolfram-program
        "/mnt/c/Program-Files/Wolfram-Research/Mathematica/12.0/math.exe")

      #+end_src
                   
